In this chapter, we will create a single-page app in React that retrieves data from an API and
runs in the browser with Webpack and Babel. Styling will be done using Bootstrap.
The app will show information about the popular TV show Rick and Morty along with images.


Requirements and steps:

It requires the React Dev Tool plugin for Chrome. 
You can install it from the Chrome Web Store, and npm v6.14.3 or later and node v14.17.0 or later.

Commands:

The command "npm init -y" will create a fresh package.json file with the bare minimum of information needed to 
run a JavaScript/React project. By adding the -y flag to the command, we can automatically skip 
the steps where we set information such as the name, version, and description.
After running this command, package.json file will be created.


Webpack:
To run React, we need to install Webpack and Webpack CLI as devDependencies.

Webpack is a library that let us create a bundle out of JS/React code that can be used in a browser:

npm install --save-dev webpack webpack-cli


After installation, these packages are included inside the package.json file where 
we can have them run in our start and build scripts. But first, we need to add
a src folder with index.js in it (index.js will be the starting point of the app).

In package.json modify scripts to:

  "scripts": {
    "start": "webpack --mode development",
    "build": "webpack --mode production"
  },

  the npm start will run Webpack in dev mode 
  the npm run build will create a production bundle using Webpack (minimizes code and decreases the size of the project bundle)

then run one of the previous two arguments


Configure Webpack to work with React:

Packages 'react' (generic core package) and 'react-dom' (entry point to browser DOM and renders React.)

npm install react react-dom

Babel

Used to create a toolchain to use React in the browser with Webpack

npm install --save-dev @babel/core babel-loader @babel/preset-env @babel/preset-react

Next to the Babel core package, we'll also install babel-loader, which is a helper so that Babel 
can run with Webpack and two preset packages. These preset packages help determine which plugins 
will be used to compile our JavaScript code into a readable format for the browser 
(@babel/preset-env) and to compile React-specific code (@babel/preset-react). 
With the packages for React and the correct compilers installed, the next step is 
to make them work with Webpack so that they are used when we run our application.
To do this, configuration files for both Webpack and Babel need to be created in the src directory of the project:

babel.config.json -> To use babe presets

webpack.config.js -> tells webpack to use babel-loader for .js files and exclide node_modules

After this Webpack and Babel set up, we can run JS and React from command line.


Rendering a React Project:

Creating a new React project involves adding som new files and modifying Webpack setup.

  1. edit index file to use react and react-dom
  2. create a public folder with index.html file (file that has step 1 element )
    Inside the body of html, is a section with a "root" ID selector created in step 1 that matches mounted app
  3. extedn webpack to add minified bundle code to the body tag as script when running
    npm install --save-dev html-webpack-plugin
    modify webpack config

  After this, when npm start is run, the index.html file will be added to dist directory and the index.html 
  will have an added scripts tag that directs to the project bundle dist/main.js

Then index files (.js in src and .html in public are the important files, dist folder gets info from there)


Creating a development server:

webpack-dev-server forces Webpack to restart every time we make changes to our project
npm install --save-dev webpack-dev-server

modify dev script in package.json to use webpack-dev-server
"start": "webpack serve â€“mode development",



Structuring a project:

Important folders:

 1. dist directory is where the output from Webpack's bundle version of our app can be found.
 2. src includes the source code of the app
 Note: node_modules holds source files for packages


There are 3 common approaches for structures:
  1. by structure by feature/page
  2. by file type
  3. a hybrid ( file first and feature second -> top level components (containers) and low level components (related to containers))



Hybrid:

1.in src, create a new folder called components with file List.js inside
2. reference this List.js in index.js
3. add a component to List component, Character.js located in components folder (inside src)


Retrieving data:

using restAPI: https://rickandmortyapi.com/documentation/#rest

This url returns a JSON output with all posible endpoints for this API
https://rickandmortyapi.com/character returns:

id(int): The unique identifier of the character
name(string): name of character
origin(object): object containing name and link to character origin location
image(string): the link to character image with 300 x 300 px


In react, anything stores in the state can be passed down to the low level components, after which they are called props.
useState -> Hook that can be used to store and update variables.
useLoading -> hook that manages loading state of functions.


Adding Style:

Using Bootstrap to add style.
npm install --save-dev bootstrap

add bootstrap entry point to src/index.js so it can style the entire app.

Loaders for webpack to compile CSS
npm install --save-dev css-loader style-loader

add packages as rule to the Webpack config:

+{
+         test: /\.css$/,
+         use: ['style-loader', 'css-loader'],
+ },

after applying className to format app, we need to add ESLint package to the projectso we can maintain our code 
by synchronizing patterns across the project.


Adding ESLint:
npm install --save-dev eslint eslint-webpack-plugin eslint-plugin-react

to configure ESLint, we need to create a filed called .eslintrc in the project root directory and add some code.